##########################################################################
# Copyright 2018 ThoughtWorks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################

$stdout.sync = true
$stderr.sync = true

require 'open-uri'
require 'timeout'
require 'json'
require 'net/http'
require 'rubygems'
require 'rubygems/version'
require 'lib/helpers.rb'
require 'lib/server-configuration.rb'


class Debian
  include Rake::DSL

  def repo
    open('/etc/apt/sources.list.d/gocd.list', 'w') do |f|
      f.puts('deb https://download.gocd.org /')
      f.puts('deb https://download.gocd.org/experimental /')
    end
    sh('curl --silent --fail --location https://download.gocd.org/GOCD-GPG-KEY.asc | apt-key add -')
    sh('apt-get update')
  end

  def install(pkg_name, pkg_version)
    sh("apt-get -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install -y #{pkg_name}=#{pkg_version}")
  end

  def uninstall(pkg_name, pkg_verion)
    sh("apt-get purge -y #{pkg_name}=#{pkg_verion}")
  end

  def setup_postgres
    sh('apt-get install -y postgresql-9.3')
    sh('apt-get install -y postgresql-contrib-9.3')
    sh('service postgresql status || service postgresql start')
    sh(%(su - postgres -c bash -c 'createdb -U postgres cruise'))
    sh(%(su - postgres -c bash -c 'sed -i 's/peer/md5/g' /etc/postgresql/9.3/main/pg_hba.conf'))
    sh(%(su - postgres -c /bin/bash -c "psql -c \\"ALTER USER postgres WITH PASSWORD 'postgres'\\";"))
    sh('service postgresql restart')
  end
end

class Redhat
  include Rake::DSL

  def repo
    sh('curl --silent --fail --location https://download.gocd.org/gocd.repo -o /etc/yum.repos.d/gocd.repo')
    sh("yum makecache --disablerepo='*' --enablerepo='gocd*'")
  end

  def install(pkg_name, pkg_verion)
    sh("yum install --assumeyes --enablerepo='gocd*' #{pkg_name}-#{pkg_verion}")
  end

  def uninstall(pkg_name, pkg_verion)
    sh("yum remove --assumeyes #{pkg_name}-#{pkg_verion}")
  end

  def setup_postgres
    sh('yum install --assumeyes postgresql-server')
    sh('yum install --assumeyes postgresql-contrib')
    sh(%(su - postgres -c bash -c 'initdb -D /var/lib/pgsql/data'))
    sh(%(su - postgres -c bash -c 'pg_ctl -D /var/lib/pgsql/data -l /var/lib/pgsql/data/logfile start'))
    sh(%(su - postgres -c bash -c 'sed -i 's/peer/md5/g' /var/lib/pgsql/data/pg_hba.conf'))
    sh(%(su - postgres -c /bin/bash -c "psql -c \\"ALTER USER postgres WITH PASSWORD 'postgres'\\";"))
    sh(%(su - postgres -c bash -c 'createdb -U postgres cruise'))
    sh(%(su - postgres -c bash -c 'pg_ctl -D /var/lib/pgsql/data -l /var/lib/pgsql/data/logfile restart'))
  end
end

{
  'debian' => Debian,
  'centos' => Redhat
}.each do |os, klass|
  namespace os do
    @postgres_setup_done = false
    @helper = Helper::SetUp.new

    def repo
      klass.new.repo
    end

    def install_server version
      
      klass.new.install('go-server', version)
      if ENV['USE_POSTGRES']
        unless @postgres_setup_done
          klass.new.setup_postgres
          @postgres_setup_done = true
        end
        setup_postgres_addon version
      end
      sh('/etc/init.d/go-server start')
    end

    def install_agent version
      klass.new.install('go-agent', version)
    end

    task :fresh_install, [:version] do |_t, args|
      repo
      install_server args.version
      install_agent args.version
      mkdir_p "/var/lib/go-server/plugins/external/" # Create this folder for plugins to be setup for respective versions
      configuration = ServerConfiguration.new(args.version)
      configuration.setup
      configuration.validate
    end

    task :upgrade_test do
      repo
      upgrade_list = ENV['UPGRADE_VERSIONS_LIST']
      p "this is the upgrade list #{upgrade_list}"
      upgrade_list.split(/\s*,\s*/).each do |version|
        begin
          install_server version
          install_agent version
          @helper.setup_postgres_addon version
          mkdir_p "/var/lib/go-server/plugins/external/" # Create this folder for plugins to be setup for respective versions
          configuration = ServerConfiguration.new(version)
          configuration.setup
          sh('/etc/init.d/go-server stop 2>/dev/null || true')
          install_server ENV['GO_VERSION']
          install_agent ENV['GO_VERSION']
          configuration.validate
        end
      end
    end 
  end
end
